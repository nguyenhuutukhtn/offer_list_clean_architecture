### File: lib/firebase_options.dart

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyBiqAe2WCBVdIA3_PC6l8pVNUN-i49ra9k',
    appId: '1:540498827266:web:970c7153e93dc33a03af1b',
    messagingSenderId: '540498827266',
    projectId: 'offer-list-project',
    authDomain: 'offer-list-project.firebaseapp.com',
    storageBucket: 'offer-list-project.appspot.com',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCyWAYCFHI9dDBbE1y1ps4UFEEJqrmKrog',
    appId: '1:540498827266:android:b9ec112a12e8874403af1b',
    messagingSenderId: '540498827266',
    projectId: 'offer-list-project',
    storageBucket: 'offer-list-project.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDRQEq9EqVbwjWYsl2w4Gah-eAoC-y67Ik',
    appId: '1:540498827266:ios:df36d0b37f2ed05b03af1b',
    messagingSenderId: '540498827266',
    projectId: 'offer-list-project',
    storageBucket: 'offer-list-project.appspot.com',
    iosBundleId: 'com.example.mobileApp',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyDRQEq9EqVbwjWYsl2w4Gah-eAoC-y67Ik',
    appId: '1:540498827266:ios:df36d0b37f2ed05b03af1b',
    messagingSenderId: '540498827266',
    projectId: 'offer-list-project',
    storageBucket: 'offer-list-project.appspot.com',
    iosBundleId: 'com.example.mobileApp',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyBiqAe2WCBVdIA3_PC6l8pVNUN-i49ra9k',
    appId: '1:540498827266:web:76639330d495420803af1b',
    messagingSenderId: '540498827266',
    projectId: 'offer-list-project',
    authDomain: 'offer-list-project.firebaseapp.com',
    storageBucket: 'offer-list-project.appspot.com',
  );

}

### File: lib/main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mobile_app/core/services/auth_service.dart';
import 'package:mobile_app/domain/entities/offer.dart';
import 'package:mobile_app/presentation/bloc/authentication_bloc.dart';
import 'package:mobile_app/presentation/bloc/offer_bloc.dart';
import 'package:mobile_app/presentation/bloc/purchase_bloc.dart';
import 'package:mobile_app/presentation/bloc/purchase_history_bloc.dart';
import 'package:mobile_app/presentation/pages/login_page.dart';
import 'package:mobile_app/presentation/pages/offer_details_page.dart';
import 'package:mobile_app/presentation/pages/offer_listing_page.dart';
import 'package:mobile_app/presentation/pages/purchase_history_page.dart';
import 'injection_container.dart' as di;
import 'presentation/pages/home_page.dart';
import 'firebase_options.dart';

void main() async {
  print('Starting app...');
  WidgetsFlutterBinding.ensureInitialized();
  print('Initializing Firebase...');
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  await di.init();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MultiRepositoryProvider(
      providers: [
         RepositoryProvider<AuthService>(
          create: (context) => di.sl<AuthService>(),
        ),
      ],
      child: MultiBlocProvider(
        providers: [
          BlocProvider(create: (_) => di.sl<AuthenticationBloc>()..add(LoginWithTokenEvent())),
          BlocProvider(create: (_) => di.sl<OfferBloc>()),
          BlocProvider(create: (_) => di.sl<PurchaseBloc>()),
          BlocProvider(create: (_) => di.sl<PurchaseHistoryBloc>()),
          
        ],
        child: MaterialApp(
          title: 'Offer App',
          theme: ThemeData(
            primarySwatch: Colors.blue,
            visualDensity: VisualDensity.adaptivePlatformDensity,
          ),
          initialRoute: '/',
          home: HomePage(),
          routes: {
            '/': (context) => HomePage(),
            '/login': (context) => LoginPage(),
            '/offers': (context) => OfferListingPage(),
            '/purchase_history': (context) => PurchaseHistoryPage(userId: RepositoryProvider.of<AuthService>(context).currentUser?.uid ?? ''),
          },
          onGenerateRoute: (settings) {
            if (settings.name == '/offer_details') {
              final args = settings.arguments as Offer;
              return MaterialPageRoute(
                builder: (context) => OfferDetailsPage(offer: args),
              );
            }
            return null;
          },
          onUnknownRoute: (settings) {
            return MaterialPageRoute(
              builder: (context) => Scaffold(
                body: Center(
                  child: Text('Route not found: ${settings.name}'),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

### File: lib/injection_container.dart

import 'package:get_it/get_it.dart';
import 'package:http/http.dart' as http;
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:mobile_app/core/database/database_helper.dart';
import 'core/network/network_info.dart';
import 'core/services/auth_service.dart';
import 'data/datasources/offer_remote_data_source.dart';
import 'data/datasources/offer_local_data_source.dart';
import 'data/datasources/purchase_remote_data_source.dart';
import 'data/repositories/offer_repository_impl.dart';
import 'data/repositories/purchase_repository_impl.dart';
import 'domain/repositories/offer_repository.dart';
import 'domain/repositories/purchase_repository.dart';
import 'domain/usecases/get_offers.dart';
import 'domain/usecases/create_offer.dart';
import 'domain/usecases/update_offer.dart';
import 'domain/usecases/delete_offer.dart';
import 'domain/usecases/purchase_offer.dart';
import 'domain/usecases/get_purchase_history.dart';
import 'presentation/bloc/offer_bloc.dart';
import 'presentation/bloc/purchase_bloc.dart';
import 'presentation/bloc/purchase_history_bloc.dart';
import 'presentation/bloc/authentication_bloc.dart';

final sl = GetIt.instance;

Future<void> init() async {
  // Use cases
  sl.registerLazySingleton(() => GetOffers(sl()));
  sl.registerLazySingleton(() => CreateOffer(sl()));
  sl.registerLazySingleton(() => UpdateOffer(sl()));
  sl.registerLazySingleton(() => DeleteOffer(sl()));
  sl.registerLazySingleton(() => PurchaseOffer(sl()));
  sl.registerLazySingleton(() => GetPurchaseHistory(sl()));

  // BLoCs
  sl.registerFactory(() => OfferBloc(
        getOffers: sl(),
        createOffer: sl(),
        updateOffer: sl(),
        deleteOffer: sl(),
      ));
  sl.registerFactory(() => PurchaseBloc(purchaseOffer: sl()));
  sl.registerFactory(() => PurchaseHistoryBloc(getPurchaseHistory: sl()));
  sl.registerFactory(() => AuthenticationBloc(authService: sl()));

  // Repositories
  sl.registerLazySingleton<OfferRepository>(
    () => OfferRepositoryImpl(
      remoteDataSource: sl(),
      // localDataSource: sl(),
      networkInfo: sl(),
    ),
  );
  sl.registerLazySingleton<PurchaseRepository>(
    () => PurchaseRepositoryImpl(
      remoteDataSource: sl(),
      networkInfo: sl(),
    ),
  );

  // Data sources
  sl.registerLazySingleton<OfferRemoteDataSource>(
    () => OfferRemoteDataSourceImpl(
        client: sl(), authService: sl(), baseUrl: 'http://192.168.1.48:3000'),
  );
  // sl.registerLazySingleton<OfferLocalDataSource>(
  //   () => OfferLocalDataSourceImpl(databaseHelper: sl()),
  // );
  sl.registerLazySingleton<PurchaseRemoteDataSource>(
    () => PurchaseRemoteDataSourceImpl(
        client: sl(), authService: sl(), baseUrl: 'http://192.168.1.48:3000'),
  );

  // Core
  sl.registerLazySingleton<NetworkInfo>(() => NetworkInfoImpl(sl()));
  sl.registerLazySingleton(() => AuthService(sl()));
  sl.registerLazySingleton(() => DatabaseHelper.instance);

  // External
  sl.registerLazySingleton(() => http.Client());
  sl.registerLazySingleton(() => InternetConnectionChecker());
  sl.registerLazySingleton(() => FirebaseAuth.instance);
}


### File: lib/core/database/database_helper.dart

import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static final DatabaseHelper instance = DatabaseHelper._init();
  static Database? _database;

  DatabaseHelper._init();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDB('offers.db');
    return _database!;
  }

  Future<Database> _initDB(String filePath) async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, filePath);

    return await openDatabase(path, version: 1, onCreate: _createDB);
  }

  Future<void> _createDB(Database db, int version) async {
    await db.execute('''
      CREATE TABLE offers(
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        description TEXT NOT NULL,
        discountPercentage REAL NOT NULL,
        originalPrice REAL NOT NULL,
        discountedPrice REAL NOT NULL
      )
    ''');
  }
}

### File: lib/core/network/network_info.dart

import 'package:internet_connection_checker/internet_connection_checker.dart';

abstract class NetworkInfo {
  Future<bool> get isConnected;
}

class NetworkInfoImpl implements NetworkInfo {
  final InternetConnectionChecker connectionChecker;

  NetworkInfoImpl(this.connectionChecker);

  @override
  Future<bool> get isConnected => connectionChecker.hasConnection;
}

### File: lib/core/utils/snackbar_util.dart

import 'package:flutter/material.dart';

class SnackbarUtil {
  static void showErrorSnackbar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: Duration(seconds: 3),
      ),
    );
  }

  static void showSuccessSnackbar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 3),
      ),
    );
  }
}

### File: lib/core/error/exceptions.dart

class ServerException implements Exception {
  final String message;

  ServerException([this.message = 'An error occurred while communicating with the server']);

  @override
  String toString() => 'ServerException: $message';
}

class CacheException implements Exception {
  final String message;

  CacheException([this.message = 'An error occurred while accessing the cache']);

  @override
  String toString() => 'CacheException: $message';
}

class NetworkException implements Exception {
  final String message;

  NetworkException([this.message = 'A network error occurred']);

  @override
  String toString() => 'NetworkException: $message';
}

class ValidationException implements Exception {
  final String message;

  ValidationException([this.message = 'A validation error occurred']);

  @override
  String toString() => 'ValidationException: $message';
}

class NotFoundException implements Exception {
  final String message;

  NotFoundException([this.message = 'The requested resource was not found']);

  @override
  String toString() => 'NotFoundException: $message';
}

class PurchaseException implements Exception {
  final String message;

  PurchaseException([this.message = 'An error occurred during the purchase process']);

  @override
  String toString() => 'PurchaseException: $message';
}

class AuthenticationException implements Exception {
  final String message;

  AuthenticationException([this.message = 'An authentication error occurred']);

  @override
  String toString() => 'AuthenticationException: $message';
}

### File: lib/core/error/failures.dart

import 'package:equatable/equatable.dart';

abstract class Failure extends Equatable {
  final String message;

  const Failure(this.message);

  @override
  List<Object> get props => [message];
}

class ServerFailure extends Failure {
  const ServerFailure([String message = 'Server failure']) : super(message);
}

class NetworkFailure extends Failure {
  const NetworkFailure([String message = 'Network failure']) : super(message);
}

class ValidationFailure extends Failure {
  const ValidationFailure(String message) : super(message);
}

class AuthenticationFailure extends Failure {
  const AuthenticationFailure([String message = 'Authentication failure']) : super(message);
}

class CacheFailure extends Failure {
  const CacheFailure([String message = 'Cache failure']) : super(message);
}

class PurchaseFailure extends Failure {
  const PurchaseFailure([String message = 'Purchase failure']) : super(message);
}

### File: lib/core/usecases/usecase.dart

import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import '../error/failures.dart';

abstract class UseCase<Type, Params> {
  Future<Either<Failure, Type>> call(Params params);
}

class NoParams extends Equatable {
  @override
  List<Object> get props => [];
}

### File: lib/core/services/auth_service.dart

import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';

class AuthService {
  final FirebaseAuth _firebaseAuth;

  AuthService(this._firebaseAuth);

  Stream<User?> get authStateChanges => _firebaseAuth.authStateChanges();

  static const String _tokenKey = 'auth_token';

  Future<void> saveToken(String token) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_tokenKey, token);
  }

  Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_tokenKey);
  }

  Future<void> deleteToken() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_tokenKey);
  }

  Future<bool> checkAndSignInWithToken() async {
    final token = await getToken();
    if (token != null) {
      try {
        final userCredential = await _firebaseAuth.signInWithCustomToken(token);
        return userCredential.user != null;
      } catch (e) {
        print("Error signing in with token: $e");
        await deleteToken(); // Token is invalid or expired, so delete it
        return false;
      }
    }
    return false;
  }

  Future<void> signIn(String email, String password) async {
    try {
      await _firebaseAuth.signInWithEmailAndPassword(email: email, password: password).then((value) async {
        final idToken = await value.user!.getIdToken();
        print(idToken);
        if (idToken != null) {
          await saveToken(idToken);
        }
      });
      
    } on FirebaseAuthException catch (e) {
      throw _handleFirebaseAuthException(e);
    }
  }

  Future<void> signUp(String email, String password) async {
    try {
      await _firebaseAuth.createUserWithEmailAndPassword(email: email, password: password);
    } on FirebaseAuthException catch (e) {
      throw _handleFirebaseAuthException(e);
    }
  }

  Future<void> signOut() async {
    await _firebaseAuth.signOut();
  }

  User? get currentUser => _firebaseAuth.currentUser;

  String _handleFirebaseAuthException(FirebaseAuthException e) {
    switch (e.code) {
      case 'weak-password':
        return 'The password provided is too weak.';
      case 'email-already-in-use':
        return 'The account already exists for that email.';
      case 'user-not-found':
        return 'No user found for that email.';
      case 'wrong-password':
        return 'Wrong password provided for that user.';
      default:
        return 'An error occurred. Please try again.';
    }
  }
}

### File: lib/data/datasources/offer_remote_data_source.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:mobile_app/core/services/auth_service.dart';
import '../../core/error/exceptions.dart';
import '../../domain/entities/offer.dart';
import '../models/offer_model.dart';

abstract class OfferRemoteDataSource {
  Future<List<OfferModel>> getOffers();
  Future<OfferModel> createOffer(OfferModel offer);
  Future<OfferModel> updateOffer(OfferModel offer);
  Future<void> deleteOffer(String offerId);
  Future<void> purchaseOffer(Offer offer, String userId);
}

class OfferRemoteDataSourceImpl implements OfferRemoteDataSource {
  final http.Client client;
  final String baseUrl;
   final AuthService authService;

  OfferRemoteDataSourceImpl( {required this.client, required this.baseUrl, required this.authService});

   Future<Map<String, String>> _getHeaders() async {
    final token = await authService.getToken();
    return {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $token',
    };
  }

  @override
  Future<List<OfferModel>> getOffers() async {
    final response = await client.get(
      Uri.parse('$baseUrl/api/offers'),
      headers: await _getHeaders(),
    );

    if (response.statusCode == 200) {
      final List<dynamic> offersJson = json.decode(response.body);
      return offersJson.map((json) => OfferModel.fromJson(json)).toList();
    } else {
      throw ServerException();
    }
  }

  @override
  Future<OfferModel> createOffer(OfferModel offer) async {
    print(offer.toJson());
    final response = await client.post(
      Uri.parse('$baseUrl/api/offers'),
      headers: await _getHeaders(),
      body: json.encode(offer.toJson()),
    );

    print(response.body);

    if (response.statusCode == 201) {
      return OfferModel.fromJson(json.decode(response.body));
    } else {
      throw ServerException();
    }
  }

  @override
  Future<OfferModel> updateOffer(OfferModel offer) async {
    final response = await client.put(
      Uri.parse('$baseUrl/api/offers/${offer.id}'),
      headers: await _getHeaders(),
      body: json.encode(offer.toJson()),
    );

    if (response.statusCode == 200) {
      return OfferModel.fromJson(json.decode(response.body));
    } else {
      throw ServerException();
    }
  }

  @override
  Future<void> deleteOffer(String offerId) async {
    final response = await client.delete(
      Uri.parse('$baseUrl/api/offers/$offerId'),
      headers: await _getHeaders(),
    );

    if (response.statusCode != 204) {
      throw ServerException();
    }
  }

  @override
  Future<void> purchaseOffer(Offer offer, String userId) async {
    final response = await client.post(
      Uri.parse('$baseUrl/api/offers/${offer.id}/purchase'),
      headers: await _getHeaders(),
      body: json.encode({
        'userId': userId,
        'offerId': offer.id,
      }),
    );

    if (response.statusCode == 200) {
      return;
    } else if (response.statusCode == 400) {
      throw ValidationException(json.decode(response.body)['message']);
    } else if (response.statusCode == 404) {
      throw NotFoundException('Offer not found');
    } else {
      throw ServerException();
    }
  }
}

### File: lib/data/datasources/offer_local_data_source.dart

// import 'package:mobile_app/core/database/database_helper.dart';
// import 'package:mobile_app/core/error/exceptions.dart';
// import 'package:sqflite/sqflite.dart';
// import '../models/offer_model.dart';

// abstract class OfferLocalDataSource {
//   Future<List<OfferModel>> getCachedOffers();
//   Future<void> cacheOffers(List<OfferModel> offers);
// }

// class OfferLocalDataSourceImpl implements OfferLocalDataSource {
//   final DatabaseHelper databaseHelper;

//   OfferLocalDataSourceImpl({required this.databaseHelper});

//   @override
//   Future<List<OfferModel>> getCachedOffers() async {
//     try {
//       final db = await databaseHelper.database;
//       final maps = await db.query('offers');
//       return List.generate(maps.length, (i) => OfferModel.fromJson(maps[i]));
//     } catch (e) {
//       throw CacheException();
//     }
//   }

//   @override
//   Future<void> cacheOffers(List<OfferModel> offers) async {
//     try {
//       final db = await databaseHelper.database;
//       await db.transaction((txn) async {
//         await txn.delete('offers');
//         for (var offer in offers) {
//           await txn.insert('offers', offer.toJson());
//         }
//       });
//     } catch (e) {
//       throw CacheException();
//     }
//   }
// }

### File: lib/data/datasources/purchase_remote_data_source.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:mobile_app/core/services/auth_service.dart';
import '../../core/error/exceptions.dart';
import '../models/purchase_history_model.dart';

abstract class PurchaseRemoteDataSource {
  Future<List<PurchaseHistoryModel>> getPurchaseHistory(String userId);
}

class PurchaseRemoteDataSourceImpl implements PurchaseRemoteDataSource {
  final http.Client client;
  final String baseUrl;
  final AuthService authService;

  PurchaseRemoteDataSourceImpl({required this.client, required this.baseUrl, required this.authService, });

  Future<Map<String, String>> _getHeaders() async {
    final token = await authService.getToken();
    return {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $token',
    };
  }

  @override
  Future<List<PurchaseHistoryModel>> getPurchaseHistory(String userId) async {
    final response = await client.get(
      Uri.parse('$baseUrl/api/purchases/$userId'),
      headers: await _getHeaders(),
    );

    if (response.statusCode == 200) {
      final List<dynamic> purchaseHistoryJson = json.decode(response.body);
      return purchaseHistoryJson.map((json) => PurchaseHistoryModel.fromJson(json)).toList();
    } else {
      throw ServerException();
    }
  }
}

### File: lib/data/repositories/purchase_repository_impl.dart

import 'package:dartz/dartz.dart';
import 'package:mobile_app/data/datasources/purchase_remote_data_source.dart';
import '../../domain/entities/purchase_history.dart';
import '../../domain/repositories/purchase_repository.dart';
import '../../core/error/failures.dart';
import '../../core/error/exceptions.dart';
import '../../core/network/network_info.dart';

class PurchaseRepositoryImpl implements PurchaseRepository {
  final PurchaseRemoteDataSource remoteDataSource;
  final NetworkInfo networkInfo;

  PurchaseRepositoryImpl({
    required this.remoteDataSource,
    required this.networkInfo,
  });

  @override
  Future<Either<Failure, List<PurchaseHistory>>> getPurchaseHistory(String userId) async {
    if (await networkInfo.isConnected) {
      try {
        final purchaseHistory = await remoteDataSource.getPurchaseHistory(userId);
        return Right(purchaseHistory);
      } on ServerException {
        return Left(ServerFailure());
      }
    } else {
      return Left(NetworkFailure());
    }
  }
}

### File: lib/data/repositories/offer_repository_impl.dart

import 'package:dartz/dartz.dart';
import 'package:mobile_app/core/network/network_info.dart';
import 'package:mobile_app/data/datasources/offer_local_data_source.dart';
import 'package:mobile_app/data/models/offer_model.dart';
import '../../domain/entities/offer.dart';
import '../../domain/repositories/offer_repository.dart';
import '../datasources/offer_remote_data_source.dart';
import '../../core/error/failures.dart';
import '../../core/error/exceptions.dart';


class OfferRepositoryImpl implements OfferRepository {
  final OfferRemoteDataSource remoteDataSource;
  // final OfferLocalDataSource localDataSource;
  final NetworkInfo networkInfo;


  OfferRepositoryImpl({
    required this.remoteDataSource,
    // required this.localDataSource,
    required this.networkInfo,
  });

  @override
  Future<Either<Failure, List<Offer>>> getOffers() async {
    if (await _isConnected()) {
      try {
        final remoteOffers = await remoteDataSource.getOffers();
        // localDataSource.cacheOffers(remoteOffers);
        return Right(remoteOffers);
      } on ServerException {
        return Left(ServerFailure());
      }
    } else {
      // try {
      //   final localOffers = await localDataSource.getCachedOffers();
      //   return Right(localOffers);
      // } on CacheException {
      //   return Left(CacheFailure());
      // }
      return Left(NetworkFailure());
    }
  }

  @override
  Future<Either<Failure, Offer>> createOffer(Offer offer) async {
    if (await _isConnected()) {
      try {
        // Convert Offer to OfferModel
        final offerModel = OfferModel(
          id: offer.id,
          title: offer.title,
          description: offer.description,
          discountPercentage: offer.discountPercentage,
          originalPrice: offer.originalPrice,
          discountedPrice: offer.discountedPrice,
        );
        
        final remoteOffer = await remoteDataSource.createOffer(offerModel);
        return Right(remoteOffer);
      } on ServerException {
        return Left(ServerFailure());
      }
    } else {
      return Left(NetworkFailure());
    }
  }

  @override
  Future<Either<Failure, Offer>> updateOffer(Offer offer) async {
    if (await _isConnected()) {
      try {
        
        final offerModel = OfferModel(
          id: offer.id,
          title: offer.title,
          description: offer.description,
          discountPercentage: offer.discountPercentage,
          originalPrice: offer.originalPrice,
          discountedPrice: offer.discountedPrice,
        );
        final updatedOffer = await remoteDataSource.updateOffer(offerModel);
        return Right(updatedOffer);
      } on ServerException {
        return Left(ServerFailure());
      }
    } else {
      return Left(NetworkFailure());
    }
  }

  @override
  Future<Either<Failure, void>> deleteOffer(String offerId) async {
    if (await _isConnected()) {
      try {
        await remoteDataSource.deleteOffer(offerId);
        return Right(null);
      } on ServerException {
        return Left(ServerFailure());
      }
    } else {
      return Left(NetworkFailure());
    }
  }

  @override
  Future<Either<Failure, void>> purchaseOffer(Offer offer, String userId) async {
    if (await networkInfo.isConnected) {
      try {
        await remoteDataSource.purchaseOffer(offer, userId);
        return Right(null);
      } on ServerException {
        return Left(ServerFailure());
      } on PurchaseException {
        return Left(PurchaseFailure());
      }
    } else {
      return Left(NetworkFailure());
    }
  }

  

  Future<bool> _isConnected() async {
    return await networkInfo.isConnected;
  }
}

### File: lib/data/models/purchase_history_model.dart

import '../../domain/entities/purchase_history.dart';
import 'offer_model.dart';

class PurchaseHistoryModel extends PurchaseHistory {
  PurchaseHistoryModel({
    required String id,
    required String userId,
    required OfferModel offer,
    required DateTime purchaseDate,
  }) : super(
          id: id,
          userId: userId,
          offer: offer,
          purchaseDate: purchaseDate,
        );

  factory PurchaseHistoryModel.fromJson(Map<String, dynamic> json) {
    return PurchaseHistoryModel(
      id: json['id'],
      userId: json['userId'],
      offer: OfferModel.fromJson(json['offer']),
      purchaseDate: DateTime.parse(json['purchaseDate']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'offer': (offer as OfferModel).toJson(),
      'purchaseDate': purchaseDate.toIso8601String(),
    };
  }
}

### File: lib/data/models/offer_model.dart

import '../../domain/entities/offer.dart';

class OfferModel extends Offer {
  OfferModel({
    required String id,
    required String title,
    required String description,
    required double discountPercentage,
    required double originalPrice,
    required double discountedPrice,
  }) : super(
          id: id,
          title: title,
          description: description,
          discountPercentage: discountPercentage,
          originalPrice: originalPrice,
          discountedPrice: discountedPrice,
        );

  factory OfferModel.fromJson(Map<String, dynamic> json) {
    return OfferModel(
      id: json['id'],
      title: json['title'],
      description: json['description'],
      discountPercentage: json['discountPercentage'].toDouble(),
      originalPrice: json['originalPrice'].toDouble(),
      discountedPrice: json['discountedPrice'].toDouble(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'discountPercentage': discountPercentage,
      'originalPrice': originalPrice,
      'discountedPrice': discountedPrice,
    };
  }
}

### File: lib/domain/repositories/offer_repository.dart

import 'package:dartz/dartz.dart';
import '../entities/offer.dart';
import '../../core/error/failures.dart';

abstract class OfferRepository {
  Future<Either<Failure, List<Offer>>> getOffers();
  Future<Either<Failure, Offer>> createOffer(Offer offer);
 Future<Either<Failure, Offer>> updateOffer(Offer offer);
  Future<Either<Failure, void>> deleteOffer(String offerId);
   Future<Either<Failure, void>> purchaseOffer(Offer offer, String userId);
}

### File: lib/domain/repositories/purchase_repository.dart

import 'package:dartz/dartz.dart';
import '../entities/purchase_history.dart';
import '../../core/error/failures.dart';

abstract class PurchaseRepository {
  Future<Either<Failure, List<PurchaseHistory>>> getPurchaseHistory(String userId);
}

### File: lib/domain/usecases/update_offer.dart

import 'package:dartz/dartz.dart';
import '../entities/offer.dart';
import '../repositories/offer_repository.dart';
import '../../core/error/failures.dart';
import '../../core/usecases/usecase.dart';

class UpdateOffer implements UseCase<Offer, UpdateOfferParams> {
  final OfferRepository repository;

  UpdateOffer(this.repository);

  @override
  Future<Either<Failure, Offer>> call(UpdateOfferParams params) async {
    if (params.offer.title.isEmpty) {
      return Left(ValidationFailure('Title cannot be empty'));
    }
    if (params.offer.description.isEmpty) {
      return Left(ValidationFailure('Description cannot be empty'));
    }
    if (params.offer.discountPercentage < 0 || params.offer.discountPercentage > 100) {
      return Left(ValidationFailure('Discount percentage must be between 0 and 100'));
    }
    if (params.offer.originalPrice <= 0) {
      return Left(ValidationFailure('Original price must be greater than 0'));
    }
    if (params.offer.discountedPrice <= 0 || params.offer.discountedPrice >= params.offer.originalPrice) {
      return Left(ValidationFailure('Discounted price must be greater than 0 and less than the original price'));
    }
    return await repository.updateOffer(params.offer);
  }
}

class UpdateOfferParams {
  final Offer offer;

  UpdateOfferParams(this.offer);
}

### File: lib/domain/usecases/delete_offer.dart

import 'package:dartz/dartz.dart';
import '../repositories/offer_repository.dart';
import '../../core/error/failures.dart';
import '../../core/usecases/usecase.dart';

class DeleteOffer implements UseCase<void, String> {
  final OfferRepository repository;

  DeleteOffer(this.repository);

  @override
  Future<Either<Failure, void>> call(String offerId) async {
    return await repository.deleteOffer(offerId);
  }
}

### File: lib/domain/usecases/create_offer.dart

import 'package:dartz/dartz.dart';
import '../entities/offer.dart';
import '../repositories/offer_repository.dart';
import '../../core/error/failures.dart';
import '../../core/usecases/usecase.dart';

class CreateOffer implements UseCase<Offer, CreateOfferParams> {
  final OfferRepository repository;

  CreateOffer(this.repository);

  @override
  Future<Either<Failure, Offer>> call(CreateOfferParams params) async {
    if (params.offer.title.isEmpty) {
      return Left(ValidationFailure('Title cannot be empty'));
    }
    if (params.offer.description.isEmpty) {
      return Left(ValidationFailure('Description cannot be empty'));
    }
    if (params.offer.discountPercentage < 0 || params.offer.discountPercentage > 100) {
      return Left(ValidationFailure('Discount percentage must be between 0 and 100'));
    }
    if (params.offer.originalPrice <= 0) {
      return Left(ValidationFailure('Original price must be greater than 0'));
    }
    if (params.offer.discountedPrice <= 0 || params.offer.discountedPrice >= params.offer.originalPrice) {
      return Left(ValidationFailure('Discounted price must be greater than 0 and less than the original price'));
    }

    return await repository.createOffer(params.offer);
  }
}

class CreateOfferParams {
  final Offer offer;

  CreateOfferParams(this.offer);
}

### File: lib/domain/usecases/get_purchase_history.dart

import 'package:dartz/dartz.dart';
import '../entities/purchase_history.dart';
import '../repositories/purchase_repository.dart';
import '../../core/error/failures.dart';
import '../../core/usecases/usecase.dart';

class GetPurchaseHistory implements UseCase<List<PurchaseHistory>, String> {
  final PurchaseRepository repository;

  GetPurchaseHistory(this.repository);

  @override
  Future<Either<Failure, List<PurchaseHistory>>> call(String userId) async {
    return await repository.getPurchaseHistory(userId);
  }
}

### File: lib/domain/usecases/get_offers.dart

import 'package:dartz/dartz.dart';
import '../entities/offer.dart';
import '../repositories/offer_repository.dart';
import '../../core/error/failures.dart';
import '../../core/usecases/usecase.dart';

class GetOffers implements UseCase<List<Offer>, NoParams> {
  final OfferRepository repository;

  GetOffers(this.repository);

  @override
  Future<Either<Failure, List<Offer>>> call(NoParams params) async {
    return await repository.getOffers();
  }
}

### File: lib/domain/usecases/purchase_offer.dart

import 'package:dartz/dartz.dart';
import '../entities/offer.dart';
import '../repositories/offer_repository.dart';
import '../../core/error/failures.dart';
import '../../core/usecases/usecase.dart';

class PurchaseOffer implements UseCase<void, PurchaseOfferParams> {
  final OfferRepository repository;

  PurchaseOffer(this.repository);

  @override
  Future<Either<Failure, void>> call(PurchaseOfferParams params) async {
    return await repository.purchaseOffer(params.offer, params.userId);
  }
}

class PurchaseOfferParams {
  final Offer offer;
  final String userId;

  PurchaseOfferParams(this.offer, this.userId);
}

### File: lib/domain/entities/purchase_history.dart

import 'package:equatable/equatable.dart';
import 'offer.dart';

class PurchaseHistory extends Equatable {
  final String id;
  final String userId;
  final Offer offer;
  final DateTime purchaseDate;

  PurchaseHistory({
    required this.id,
    required this.userId,
    required this.offer,
    required this.purchaseDate,
  });

  @override
  List<Object> get props => [id, userId, offer, purchaseDate];
}

### File: lib/domain/entities/offer.dart

class Offer {
  final String id;
  final String title;
  final String description;
  final double discountPercentage;
  final double originalPrice;
  final double discountedPrice;

  Offer({
    required this.id,
    required this.title,
    required this.description,
    required this.discountPercentage,
    required this.originalPrice,
    required this.discountedPrice,
  });
}

### File: lib/presentation/pages/purchase_history_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/purchase_history_bloc.dart';
import '../../domain/entities/purchase_history.dart';

class PurchaseHistoryPage extends StatelessWidget {
  final String userId;

  const PurchaseHistoryPage({Key? key, required this.userId}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Purchase History')),
      body: BlocProvider(
        create: (context) => PurchaseHistoryBloc(
          getPurchaseHistory: RepositoryProvider.of(context),
        )..add(GetPurchaseHistoryEvent(userId)),
        child: BlocBuilder<PurchaseHistoryBloc, PurchaseHistoryState>(
          builder: (context, state) {
            if (state is PurchaseHistoryLoading) {
              return Center(child: CircularProgressIndicator());
            } else if (state is PurchaseHistoryLoaded) {
              return ListView.builder(
                itemCount: state.purchaseHistory.length,
                itemBuilder: (context, index) {
                  return PurchaseHistoryItem(purchaseHistory: state.purchaseHistory[index]);
                },
              );
            } else if (state is PurchaseHistoryError) {
              return Center(child: Text(state.message));
            }
            return Center(child: Text('No purchase history available'));
          },
        ),
      ),
    );
  }
}

class PurchaseHistoryItem extends StatelessWidget {
  final PurchaseHistory purchaseHistory;

  const PurchaseHistoryItem({Key? key, required this.purchaseHistory}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text(purchaseHistory.offer.title),
      subtitle: Text('Purchased on ${purchaseHistory.purchaseDate.toLocal()}'),
      trailing: Text('\$${purchaseHistory.offer.discountedPrice}'),
    );
  }
}

### File: lib/presentation/pages/offer_listing_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mobile_app/core/utils/snackbar_util.dart';
import 'package:mobile_app/presentation/bloc/offer_event.dart';
import 'package:mobile_app/presentation/bloc/offer_state.dart';
import '../../core/services/auth_service.dart';
import '../bloc/offer_bloc.dart';
import '../widgets/offer_card.dart';
import '../widgets/offer_form.dart';
import '../widgets/app_drawer.dart';

class OfferListingPage extends StatefulWidget {
  @override
  State<OfferListingPage> createState() => _OfferListingPageState();
}

class _OfferListingPageState extends State<OfferListingPage> {

  late AuthService authService;

  @override
  void initState() {
    super.initState();
     authService = RepositoryProvider.of<AuthService>(context);

  }

  @override
  Widget build(BuildContext context) {
    

    return Scaffold(
      appBar: AppBar(
        title: Text('Special Offers'),
        actions: [
          IconButton(
            icon: Icon(Icons.add),
            onPressed: () {
              _showOfferForm(context);
            },
          ),
        ],
      ),
      drawer: AppDrawer(authService: authService),
      body: BlocConsumer<OfferBloc, OfferState>(
        listener: (context, state) {
          if (state is OfferError) {
            SnackbarUtil.showErrorSnackbar(context, state.message);
          } else if (state is OfferCreated || state is OfferUpdated) {
            SnackbarUtil.showSuccessSnackbar(context, 'Offer saved successfully');
          } else if (state is OfferDeleted) {
            SnackbarUtil.showSuccessSnackbar(context, 'Offer deleted successfully');
          }
        },
        builder: (context, state) {
          print('state: $state');
          if (state is OfferInitial) {
            BlocProvider.of<OfferBloc>(context).add(GetOffersEvent());
            return Center(child: CircularProgressIndicator());
          } else if (state is OfferLoading) {
            return Center(child: CircularProgressIndicator());
          } else if (state is OfferLoaded) {
            return RefreshIndicator(
              onRefresh: () async {
                BlocProvider.of<OfferBloc>(context).add(GetOffersEvent());
              },
              child: Builder(
                builder: (context) {
                  if (state.offers.isEmpty) {
                    return Center(child: Text('No offers available'));
                  }
                  return ListView.builder(
                    itemCount: state.offers.length,
                    itemBuilder: (context, index) {
                      return OfferCard(
                        offer: state.offers[index],
                        onTap: () {
                          Navigator.pushNamed(
                            context,
                            '/offer_details',
                            arguments: state.offers[index],
                          );
                        },
                      );
                    },
                  );
                }
              ),
            );
          } else if (state is OfferError) {
            return Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    'Oops! Something went wrong.',
                    style: TextStyle(fontSize: 18),
                  ),
                  SizedBox(height: 16),
                  Text(
                    state.message,
                    style: TextStyle(fontSize: 14, color: Colors.red),
                  ),
                  SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () {
                      BlocProvider.of<OfferBloc>(context).add(GetOffersEvent());
                    },
                    child: Text('Try Again'),
                  ),
                ],
              ),
            );
          }
          return Center(child: Text('No offers available'));
        },
      ),
    );
  }

  void _showOfferForm(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: OfferForm(),
            ),
          ),
        );
      },
    );
  }
}

### File: lib/presentation/pages/login_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/authentication_bloc.dart';
import 'registration_page.dart';

class LoginPage extends StatelessWidget {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Login')),
      body: BlocConsumer<AuthenticationBloc, AuthenticationState>(
        listener: (context, state) {
          if (state is AuthenticationError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          } else if (state is Authenticated) {
            Navigator.of(context).pushReplacementNamed('/offers');
          }
        },
        builder: (context, state) {
          return Padding(
            padding: EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                TextField(
                  controller: _emailController,
                  decoration: InputDecoration(labelText: 'Email'),
                  keyboardType: TextInputType.emailAddress,
                ),
                SizedBox(height: 8),
                TextField(
                  controller: _passwordController,
                  decoration: InputDecoration(labelText: 'Password'),
                  obscureText: true,
                ),
                SizedBox(height: 16),
                if (state is AuthenticationLoading)
                  CircularProgressIndicator()
                else
                  ElevatedButton(
                    child: Text('Login'),
                    onPressed: () {
                      if (_validateInputs(context)) {
                        BlocProvider.of<AuthenticationBloc>(context).add(
                          LoginEvent(_emailController.text, _passwordController.text),
                        );
                      }
                    },
                  ),
                TextButton(
                  child: Text('Create an account'),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => RegistrationPage()),
                    );
                  },
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  bool _validateInputs(BuildContext context) {
    if (_emailController.text.isEmpty || _passwordController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please fill in all fields')),
      );
      return false;
    }
    return true;
  }
}

### File: lib/presentation/pages/home_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/authentication_bloc.dart';
import 'login_page.dart';
import 'offer_listing_page.dart';

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthenticationBloc, AuthenticationState>(
      builder: (context, state) {
        if (state is AuthenticationLoading) {
          return Scaffold(body: Center(child: CircularProgressIndicator()));
        } else if (state is Authenticated) {
          return OfferListingPage();
        } else {
          return LoginPage();
        }
      },
    );
  }
}

### File: lib/presentation/pages/offer_details_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mobile_app/presentation/bloc/offer_event.dart';
import '../../domain/entities/offer.dart';
import '../bloc/offer_bloc.dart';
import '../bloc/purchase_bloc.dart';
import '../widgets/offer_form.dart';

class OfferDetailsPage extends StatelessWidget {
  final Offer offer;

  const OfferDetailsPage({Key? key, required this.offer}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(offer.title),
        actions: [
          IconButton(
            icon: Icon(Icons.edit),
            onPressed: () {
              _showEditOfferForm(context);
            },
          ),
          IconButton(
            icon: Icon(Icons.delete),
            onPressed: () {
              _showDeleteConfirmationDialog(context);
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(offer.description),
            SizedBox(height: 16),
            Text('Original Price: \$${offer.originalPrice}'),
            Text('Discounted Price: \$${offer.discountedPrice}'),
            Text('Discount: ${offer.discountPercentage}%'),
            SizedBox(height: 32),
            BlocConsumer<PurchaseBloc, PurchaseState>(
              listener: (context, state) {
                if (state is PurchaseSuccess) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Purchase successful!')),
                  );
                } else if (state is PurchaseFailure) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Purchase failed:')),
                  );
                }
              },
              builder: (context, state) {
                if (state is PurchaseLoading) {
                  return Center(child: CircularProgressIndicator());
                }
                return ElevatedButton(
                  child: Text('Buy Now'),
                  onPressed: () => _showBuyNowDialog(context),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showEditOfferForm(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: OfferForm(offer: offer),
            ),
          ),
        );
      },
    );
  }

  void _showDeleteConfirmationDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Delete Offer'),
          content: Text('Are you sure you want to delete this offer?'),
          actions: <Widget>[
            TextButton(
              child: Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
            TextButton(
              child: Text('Delete'),
              onPressed: () {
                BlocProvider.of<OfferBloc>(context).add(DeleteOfferEvent(offer.id));
                Navigator.of(context).pop(); // Close the dialog
                Navigator.of(context).pop(); // Go back to the listing page
              },
            ),
          ],
        );
      },
    );
  }

  void _showBuyNowDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Confirm Purchase'),
          content: Text('Are you sure you want to buy this offer?'),
          actions: <Widget>[
            TextButton(
              child: Text('Cancel'),
              onPressed: () => Navigator.of(context).pop(),
            ),
            TextButton(
              child: Text('Buy'),
              onPressed: () {
                Navigator.of(context).pop();
                String userId = 'current_user_id';
                BlocProvider.of<PurchaseBloc>(context).add(PurchaseOfferEvent(offer, userId));
              },
            ),
          ],
        );
      },
    );
  }
}

### File: lib/presentation/pages/registration_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/authentication_bloc.dart';

class RegistrationPage extends StatelessWidget {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _confirmPasswordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Register')),
      body: BlocConsumer<AuthenticationBloc, AuthenticationState>(
        listener: (context, state) {
          if (state is AuthenticationError) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text(state.message)),
            );
          } else if (state is Authenticated) {
            Navigator.of(context).pushReplacementNamed('/');
          }
        },
        builder: (context, state) {
          return Padding(
            padding: EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                TextField(
                  controller: _emailController,
                  decoration: InputDecoration(labelText: 'Email'),
                  keyboardType: TextInputType.emailAddress,
                ),
                SizedBox(height: 8),
                TextField(
                  controller: _passwordController,
                  decoration: InputDecoration(labelText: 'Password'),
                  obscureText: true,
                ),
                SizedBox(height: 8),
                TextField(
                  controller: _confirmPasswordController,
                  decoration: InputDecoration(labelText: 'Confirm Password'),
                  obscureText: true,
                ),
                SizedBox(height: 16),
                if (state is AuthenticationLoading)
                  CircularProgressIndicator()
                else
                  ElevatedButton(
                    child: Text('Register'),
                    onPressed: () {
                      if (_validateInputs(context)) {
                        BlocProvider.of<AuthenticationBloc>(context).add(
                          RegisterEvent(_emailController.text, _passwordController.text),
                        );
                      }
                    },
                  ),
              ],
            ),
          );
        },
      ),
    );
  }

  bool _validateInputs(BuildContext context) {
    if (_emailController.text.isEmpty || 
        _passwordController.text.isEmpty || 
        _confirmPasswordController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please fill in all fields')),
      );
      return false;
    }
    if (_passwordController.text != _confirmPasswordController.text) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Passwords do not match')),
      );
      return false;
    }
    return true;
  }
}

### File: lib/presentation/widgets/app_drawer.dart

import 'package:flutter/material.dart';
import '../pages/offer_listing_page.dart';
import '../pages/purchase_history_page.dart';
import '../../core/services/auth_service.dart';

class AppDrawer extends StatelessWidget {
  final AuthService authService;

  const AppDrawer({Key? key, required this.authService}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: <Widget>[
          DrawerHeader(
            decoration: BoxDecoration(
              color: Theme.of(context).primaryColor,
            ),
            child: Text(
              'Menu',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
              ),
            ),
          ),
          ListTile(
            leading: Icon(Icons.local_offer),
            title: Text('Offers'),
            onTap: () {
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(builder: (context) => OfferListingPage()),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.history),
            title: Text('Purchase History'),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => PurchaseHistoryPage(userId: authService.currentUser!.uid),
                ),
              );
            },
          ),
          ListTile(
            leading: Icon(Icons.exit_to_app),
            title: Text('Logout'),
            onTap: () async {
              await authService.signOut();
              Navigator.pushReplacementNamed(context, '/login');
            },
          ),
        ],
      ),
    );
  }
}

### File: lib/presentation/widgets/offer_form.dart

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mobile_app/presentation/bloc/offer_event.dart';
import '../../domain/entities/offer.dart';
import '../bloc/offer_bloc.dart';

class OfferForm extends StatefulWidget {
  final Offer? offer;

  const OfferForm({Key? key, this.offer}) : super(key: key);

  @override
  _OfferFormState createState() => _OfferFormState();
}

class _OfferFormState extends State<OfferForm> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  late TextEditingController _discountPercentageController;
  late TextEditingController _originalPriceController;
  late TextEditingController _discountedPriceController;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.offer?.title ?? '');
    _descriptionController = TextEditingController(text: widget.offer?.description ?? '');
    _discountPercentageController = TextEditingController(text: widget.offer?.discountPercentage.toString() ?? '');
    _originalPriceController = TextEditingController(text: widget.offer?.originalPrice.toString() ?? '');
    _discountedPriceController = TextEditingController(text: widget.offer?.discountedPrice.toString() ?? '');
  }

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        children: [
          TextFormField(
            controller: _titleController,
            decoration: InputDecoration(labelText: 'Title'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter a title';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _descriptionController,
            decoration: InputDecoration(labelText: 'Description'),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter a description';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _discountPercentageController,
            decoration: InputDecoration(labelText: 'Discount Percentage'),
            keyboardType: TextInputType.number,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter a discount percentage';
              }
              final percentage = double.tryParse(value);
              if (percentage == null || percentage < 0 || percentage > 100) {
                return 'Please enter a valid percentage between 0 and 100';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _originalPriceController,
            decoration: InputDecoration(labelText: 'Original Price'),
            keyboardType: TextInputType.number,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter an original price';
              }
              final price = double.tryParse(value);
              if (price == null || price <= 0) {
                return 'Please enter a valid price greater than 0';
              }
              return null;
            },
          ),
          TextFormField(
            controller: _discountedPriceController,
            decoration: InputDecoration(labelText: 'Discounted Price'),
            keyboardType: TextInputType.number,
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter a discounted price';
              }
              final discountedPrice = double.tryParse(value);
              final originalPrice = double.tryParse(_originalPriceController.text);
              if (discountedPrice == null || discountedPrice <= 0 || originalPrice == null || discountedPrice >= originalPrice) {
                return 'Please enter a valid discounted price (greater than 0 and less than the original price)';
              }
              return null;
            },
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                final offer = Offer(
                  id: widget.offer?.id ?? '',
                  title: _titleController.text,
                  description: _descriptionController.text,
                  discountPercentage: double.parse(_discountPercentageController.text),
                  originalPrice: double.parse(_originalPriceController.text),
                  discountedPrice: double.parse(_discountedPriceController.text),
                );

                if (widget.offer == null) {
                  BlocProvider.of<OfferBloc>(context).add(CreateOfferEvent(offer));
                } else {
                  BlocProvider.of<OfferBloc>(context).add(UpdateOfferEvent(offer));
                }

                Navigator.pop(context);
              }
            },
            child: Text(widget.offer == null ? 'Create Offer' : 'Update Offer'),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _discountPercentageController.dispose();
    _originalPriceController.dispose();
    _discountedPriceController.dispose();
    super.dispose();
  }
}

### File: lib/presentation/widgets/offer_card.dart

import 'package:flutter/material.dart';
import '../../domain/entities/offer.dart';

class OfferCard extends StatelessWidget {
  final Offer offer;
  final VoidCallback onTap;

  const OfferCard({Key? key, required this.offer, required this.onTap}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 4,
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                offer.title,
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 8),
              Text(
                offer.description,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '\$${offer.discountedPrice.toStringAsFixed(2)}',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Theme.of(context).primaryColor,
                        ),
                      ),
                      Text(
                        '\$${offer.originalPrice.toStringAsFixed(2)}',
                        style: TextStyle(
                          fontSize: 14,
                          decoration: TextDecoration.lineThrough,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: Theme.of(context).primaryColor,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${offer.discountPercentage.toStringAsFixed(0)}% OFF',
                      style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

### File: lib/presentation/bloc/offer_bloc.dart

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:mobile_app/core/usecases/usecase.dart';
import '../../domain/usecases/get_offers.dart';
import '../../domain/usecases/create_offer.dart';
import '../../domain/usecases/update_offer.dart';
import '../../domain/usecases/delete_offer.dart';
import '../../core/error/failures.dart';
import 'offer_event.dart';
import 'offer_state.dart';

class OfferBloc extends Bloc<OfferEvent, OfferState> {
  final GetOffers getOffers;
  final CreateOffer createOffer;
  final UpdateOffer updateOffer;
  final DeleteOffer deleteOffer;

  OfferBloc({
    required this.getOffers,
    required this.createOffer,
    required this.updateOffer,
    required this.deleteOffer,
  }) : super(OfferInitial()) {
    on<GetOffersEvent>(_onGetOffers);
    on<CreateOfferEvent>(_onCreateOffer);
    on<UpdateOfferEvent>(_onUpdateOffer);
    on<DeleteOfferEvent>(_onDeleteOffer);
  }

  void _onGetOffers(GetOffersEvent event, Emitter<OfferState> emit) async {
    emit(OfferLoading());
    try {
      final failureOrOffers = await getOffers(NoParams());
      emit(failureOrOffers.fold(
        (failure) => OfferError(_mapFailureToMessage(failure)),
        (offers) => OfferLoaded(offers),
      ));
    } catch (e) {
      emit(OfferError('An unexpected error occurred: ${e.toString()}'));
    }
  }

  void _onCreateOffer(CreateOfferEvent event, Emitter<OfferState> emit) async {
    emit(OfferLoading());
    try {
      final failureOrOffer = await createOffer(CreateOfferParams(event.offer));
      emit(failureOrOffer.fold(
        (failure) => OfferError(_mapFailureToMessage(failure)),
        (offer) => OfferCreated(offer),
      ));
    } catch (e) {
      emit(OfferError('An unexpected error occurred: ${e.toString()}'));
    }
  }

  void _onUpdateOffer(UpdateOfferEvent event, Emitter<OfferState> emit) async {
    emit(OfferLoading());
    try {
      final failureOrOffer = await updateOffer(UpdateOfferParams(event.offer));
      emit(failureOrOffer.fold(
        (failure) => OfferError(_mapFailureToMessage(failure)),
        (offer) => OfferUpdated(offer),
      ));
    } catch (e) {
      emit(OfferError('An unexpected error occurred: ${e.toString()}'));
    }
  }

  void _onDeleteOffer(DeleteOfferEvent event, Emitter<OfferState> emit) async {
    emit(OfferLoading());
    try {
      final failureOrVoid = await deleteOffer(event.offerId);
      emit(failureOrVoid.fold(
        (failure) => OfferError(_mapFailureToMessage(failure)),
        (_) => OfferDeleted(),
      ));
    } catch (e) {
      emit(OfferError('An unexpected error occurred: ${e.toString()}'));
    }
  }

  String _mapFailureToMessage(Failure failure) {
    switch (failure.runtimeType) {
      case ServerFailure:
        return 'Server failure. Please try again later.';
      case NetworkFailure:
        return 'Network failure. Please check your internet connection.';
      case ValidationFailure:
        return (failure as ValidationFailure).message;
      default:
        return 'Unexpected error. Please try again.';
    }
  }
}

### File: lib/presentation/bloc/purchase_bloc.dart

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import '../../domain/usecases/purchase_offer.dart';
import '../../domain/entities/offer.dart';
import '../../core/error/failures.dart';

// Events
abstract class PurchaseEvent extends Equatable {
  const PurchaseEvent();

  @override
  List<Object> get props => [];
}

class PurchaseOfferEvent extends PurchaseEvent {
  final Offer offer;
  final String userId;

  const PurchaseOfferEvent(this.offer, this.userId);

  @override
  List<Object> get props => [offer, userId];
}

// States
abstract class PurchaseState extends Equatable {
  const PurchaseState();
  
  @override
  List<Object> get props => [];
}

class PurchaseInitial extends PurchaseState {}

class PurchaseLoading extends PurchaseState {}

class PurchaseSuccess extends PurchaseState {}

class PurchaseFailure extends PurchaseState {
  final String message;

  const PurchaseFailure(this.message);

  @override
  List<Object> get props => [message];
}

// BLoC
class PurchaseBloc extends Bloc<PurchaseEvent, PurchaseState> {
  final PurchaseOffer purchaseOffer;

  PurchaseBloc({required this.purchaseOffer}) : super(PurchaseInitial()) {
    on<PurchaseOfferEvent>(_onPurchaseOffer);
  }

  void _onPurchaseOffer(PurchaseOfferEvent event, Emitter<PurchaseState> emit) async {
    emit(PurchaseLoading());
    final result = await purchaseOffer(PurchaseOfferParams(event.offer, event.userId));
    emit(result.fold(
      (failure) => PurchaseFailure(_mapFailureToMessage(failure)),
      (_) => PurchaseSuccess(),
    ));
  }

  String _mapFailureToMessage(Failure failure) {
    switch (failure.runtimeType) {
      case ServerFailure:
        return 'Couldn\'t connect to the server. Please try again.';
      case NetworkFailure:
        return 'No internet connection. Please check your network settings.';
      case PurchaseFailure:
        return 'Failed to complete the purchase. Please try again.';
      default:
        return 'An unexpected error occurred. Please try again.';
    }
  }
}

### File: lib/presentation/bloc/offer_state.dart

import 'package:equatable/equatable.dart';
import '../../domain/entities/offer.dart';

abstract class OfferState extends Equatable {
  const OfferState();
  
  @override
  List<Object> get props => [];
}

class OfferInitial extends OfferState {}

class OfferLoading extends OfferState {}

class OfferLoaded extends OfferState {
  final List<Offer> offers;

  const OfferLoaded(this.offers);

  @override
  List<Object> get props => [offers];
}

class OfferError extends OfferState {
  final String message;

  const OfferError(this.message);

  @override
  List<Object> get props => [message];
}

class OfferCreated extends OfferState {
  final Offer offer;

  const OfferCreated(this.offer);

  @override
  List<Object> get props => [offer];
}

class OfferUpdated extends OfferState {
  final Offer offer;

  const OfferUpdated(this.offer);

  @override
  List<Object> get props => [offer];
}

class OfferDeleted extends OfferState {}

### File: lib/presentation/bloc/authentication_bloc.dart

import 'dart:math';

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import '../../core/services/auth_service.dart';

// Events
abstract class AuthenticationEvent extends Equatable {
  const AuthenticationEvent();

  @override
  List<Object> get props => [];
}

class LoginEvent extends AuthenticationEvent {
  final String email;
  final String password;

  const LoginEvent(this.email, this.password);

  @override
  List<Object> get props => [email, password];
}

class LoginWithTokenEvent extends AuthenticationEvent {}

class RegisterEvent extends AuthenticationEvent {
  final String email;
  final String password;

  const RegisterEvent(this.email, this.password);

  @override
  List<Object> get props => [email, password];
}

class LogoutEvent extends AuthenticationEvent {}

// States
abstract class AuthenticationState extends Equatable {
  const AuthenticationState();

  @override
  List<Object> get props => [];
}

class AuthenticationInitial extends AuthenticationState {}

class AuthenticationLoading extends AuthenticationState {}

class Authenticated extends AuthenticationState {}

class Unauthenticated extends AuthenticationState {}

class AuthenticationError extends AuthenticationState {
  final String message;

  const AuthenticationError(this.message);

  @override
  List<Object> get props => [message];
}

// BLoC
class AuthenticationBloc extends Bloc<AuthenticationEvent, AuthenticationState> {
  final AuthService authService;

  AuthenticationBloc({required this.authService}) : super(AuthenticationInitial()) {
    on<LoginEvent>(_onLogin);
    on<LoginWithTokenEvent>(_onLoginWithToken);
    on<RegisterEvent>(_onRegister);
    on<LogoutEvent>(_onLogout);
  }


  void _onLogin(LoginEvent event, Emitter<AuthenticationState> emit) async {
    emit(AuthenticationLoading());
    try {
      await authService.signIn(event.email, event.password);
      
      emit(Authenticated());
    } catch (e) {
      emit(AuthenticationError(e.toString()));
    }
  }

  void _onLoginWithToken(LoginWithTokenEvent event, Emitter<AuthenticationState> emit) async {
    emit(AuthenticationLoading());
    try {
      final isAuthenticated = await authService.checkAndSignInWithToken();
      if (isAuthenticated) {
        emit(Authenticated());
      } else {
        emit(Unauthenticated());
      }
    } catch (e) {
      emit(AuthenticationError(e.toString()));
    }
  }

  void _onRegister(RegisterEvent event, Emitter<AuthenticationState> emit) async {
    emit(AuthenticationLoading());
    try {
      await authService.signUp(event.email, event.password);
      emit(Authenticated());
    } catch (e) {
      emit(AuthenticationError(e.toString()));
    }
  }

  void _onLogout(LogoutEvent event, Emitter<AuthenticationState> emit) async {
    emit(AuthenticationLoading());
    try {
      await authService.signOut();
      emit(Unauthenticated());
    } catch (e) {
      emit(AuthenticationError(e.toString()));
    }
  }
}

### File: lib/presentation/bloc/purchase_history_bloc.dart

import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:mobile_app/core/error/failures.dart';
import '../../domain/entities/purchase_history.dart';
import '../../domain/usecases/get_purchase_history.dart';

// Events
abstract class PurchaseHistoryEvent extends Equatable {
  const PurchaseHistoryEvent();

  @override
  List<Object> get props => [];
}

class GetPurchaseHistoryEvent extends PurchaseHistoryEvent {
  final String userId;

  const GetPurchaseHistoryEvent(this.userId);

  @override
  List<Object> get props => [userId];
}

// States
abstract class PurchaseHistoryState extends Equatable {
  const PurchaseHistoryState();
  
  @override
  List<Object> get props => [];
}

class PurchaseHistoryInitial extends PurchaseHistoryState {}

class PurchaseHistoryLoading extends PurchaseHistoryState {}

class PurchaseHistoryLoaded extends PurchaseHistoryState {
  final List<PurchaseHistory> purchaseHistory;

  const PurchaseHistoryLoaded(this.purchaseHistory);

  @override
  List<Object> get props => [purchaseHistory];
}

class PurchaseHistoryError extends PurchaseHistoryState {
  final String message;

  const PurchaseHistoryError(this.message);

  @override
  List<Object> get props => [message];
}

// BLoC
class PurchaseHistoryBloc extends Bloc<PurchaseHistoryEvent, PurchaseHistoryState> {
  final GetPurchaseHistory getPurchaseHistory;

  PurchaseHistoryBloc({required this.getPurchaseHistory}) : super(PurchaseHistoryInitial()) {
    on<GetPurchaseHistoryEvent>(_onGetPurchaseHistory);
  }

  void _onGetPurchaseHistory(GetPurchaseHistoryEvent event, Emitter<PurchaseHistoryState> emit) async {
    emit(PurchaseHistoryLoading());
    final result = await getPurchaseHistory(event.userId);
    emit(result.fold(
      (failure) => PurchaseHistoryError(_mapFailureToMessage(failure)),
      (purchaseHistory) => PurchaseHistoryLoaded(purchaseHistory),
    ));
  }

  String _mapFailureToMessage(Failure failure) {
    switch (failure.runtimeType) {
      case ServerFailure:
        return 'Couldn\'t connect to the server. Please try again.';
      case NetworkFailure:
        return 'No internet connection. Please check your network settings.';
      default:
        return 'An unexpected error occurred. Please try again.';
    }
  }
}

### File: lib/presentation/bloc/offer_event.dart

import 'package:equatable/equatable.dart';
import '../../domain/entities/offer.dart';

abstract class OfferEvent extends Equatable {
  const OfferEvent();

  @override
  List<Object> get props => [];
}

class GetOffersEvent extends OfferEvent {}

class CreateOfferEvent extends OfferEvent {
  final Offer offer;

  const CreateOfferEvent(this.offer);

  @override
  List<Object> get props => [offer];
}

class UpdateOfferEvent extends OfferEvent {
  final Offer offer;

  const UpdateOfferEvent(this.offer);

  @override
  List<Object> get props => [offer];
}

class DeleteOfferEvent extends OfferEvent {
  final String offerId;

  const DeleteOfferEvent(this.offerId);

  @override
  List<Object> get props => [offerId];
}

