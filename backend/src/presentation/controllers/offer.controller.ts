import { Request, Response } from 'express';
import { GetOffersUseCase } from '../../domain/usecases/get-offers.usecase';
import { CreateOfferUseCase } from '../../domain/usecases/create-offer.usecase';
import { UpdateOfferUseCase } from '../../domain/usecases/update-offer.usecase';
import { DeleteOfferUseCase } from '../../domain/usecases/delete-offer.usecase';
import { Offer } from '../../domain/entities/offer.entity';
import { ValidationError, NotFoundError } from '../../core/errors/app-error';
import { injectable } from 'inversify';

@injectable()
export class OfferController {
  constructor(
    private getOffersUseCase: GetOffersUseCase,
    private createOfferUseCase: CreateOfferUseCase,
    private updateOfferUseCase: UpdateOfferUseCase,
    private deleteOfferUseCase: DeleteOfferUseCase
  ) {}

  async getOffers(req: Request, res: Response): Promise<void> {
    try {
      const offers = await this.getOffersUseCase.execute();
      res.json(offers);
    } catch (error) {
      res.status(500).json({ message: 'Error fetching offers' });
    }
  }

  async createOffer(req: Request, res: Response): Promise<void> {
    try {
      const { title, description, discountPercentage, originalPrice, discountedPrice } = req.body;
      const offer = new Offer(
        '', // ID will be generated by the database
        title,
        description,
        discountPercentage,
        originalPrice,
        discountedPrice
      );
      const createdOffer = await this.createOfferUseCase.execute(offer);
      res.status(201).json(createdOffer);
    } catch (error) {
      if (error instanceof ValidationError) {
        res.status(400).json({ message: error.message });
      } else {
        res.status(500).json({ message: 'Error creating offer' });
      }
    }
  }

  async updateOffer(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const { title, description, discountPercentage, originalPrice, discountedPrice } = req.body;
      const offer = new Offer(
        id,
        title,
        description,
        discountPercentage,
        originalPrice,
        discountedPrice
      );
      const updatedOffer = await this.updateOfferUseCase.execute(offer);
      res.json(updatedOffer);
    } catch (error) {
      if (error instanceof ValidationError) {
        res.status(400).json({ message: error.message });
      } else if (error instanceof NotFoundError) {
        res.status(404).json({ message: error.message });
      } else {
        res.status(500).json({ message: 'Error updating offer' });
      }
    }
  }

  async deleteOffer(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      await this.deleteOfferUseCase.execute(id);
      res.status(204).send();
    } catch (error) {
      if (error instanceof NotFoundError) {
        res.status(404).json({ message: error.message });
      } else {
        res.status(500).json({ message: 'Error deleting offer' });
      }
    }
  }
}